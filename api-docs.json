{
  "openapi": "3.0.3",
  "info": {
    "title": "phnxserver",
    "description": "",
    "contact": {
      "name": "",
      "email": ""
    },
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "paths": {
    "/health_check": {
      "get": {
        "tags": [
          "crate"
        ],
        "summary": "A simple health check endpoint.",
        "description": "A simple health check endpoint.\n",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "The server is healthy."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_ADD_CLIENTS}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to add clients to a group.",
        "description": "DS endpoint to add clients to a group.\n",
        "operationId": "ds_add_clients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddClientsParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added client."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_ADD_USERS}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to add users to a group.",
        "description": "DS endpoint to add users to a group.\n",
        "operationId": "ds_add_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUsersParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added users to a group."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_CREATE_GROUP}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint for group creation.",
        "description": "DS endpoint for group creation.\n",
        "operationId": "ds_create_group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group created successfully."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_DELETE_GROUP}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to delete group.",
        "description": "DS endpoint to delete group.\n",
        "operationId": "ds_delete_group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGroupParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group deleted."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_EXTERNAL_COMMIT_INFO}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to retrieve External Commit information.",
        "description": "DS endpoint to retrieve External Commit information.\n",
        "operationId": "ds_external_commit_info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalCommitInfoParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieved external commit info."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_JOIN_CONNECTION_GROUP}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to join a connection group.",
        "description": "DS endpoint to join a connection group.\n",
        "operationId": "ds_join_connection_group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinConnectionGroupParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Joined connection group."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_JOIN_GROUP}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to join a group.",
        "description": "DS endpoint to join a group.\n",
        "operationId": "ds_join_group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinGroupParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Joined group."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_REMOVE_CLIENTS}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to remove clients.",
        "description": "DS endpoint to remove clients.\n",
        "operationId": "ds_remove_clients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveClientsParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Removed client from group."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_REMOVE_USERS}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS emdpoint to remove users from a group.",
        "description": "DS emdpoint to remove users from a group.\n",
        "operationId": "ds_remove_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUsersParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Removed users from a group."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_RESYNC_CLIENT}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to resync a client.",
        "description": "DS endpoint to resync a client.\n",
        "operationId": "ds_resync_client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResyncClientParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Resynced client."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_SELF_REMOVE_CLIENT}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to self remove client.",
        "description": "DS endpoint to self remove client.\n",
        "operationId": "ds_self_remove_client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfRemoveClientParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Client self removed."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_SELF_REMOVE_USER}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to self remove user.",
        "description": "DS endpoint to self remove user.\n",
        "operationId": "ds_self_remove_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfRemoveUserParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User self removed."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_SEND_MESSAGE}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint to send message.",
        "description": "DS endpoint to send message.\n",
        "operationId": "ds_send_message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message sent."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_UPDATE_QUEUE_INFO}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint for updating queue information.",
        "description": "DS endpoint for updating queue information.\n",
        "operationId": "ds_update_queue_info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueueInfoParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Queue info udpated successfully."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_DS_WELCOME_INFO}": {
      "post": {
        "tags": [
          "DS"
        ],
        "summary": "DS endpoint for retrieving the public ratchet tree and the credential",
        "description": "DS endpoint for retrieving the public ratchet tree and the credential\nchains.\n",
        "operationId": "ds_welcome_info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WelcomeInfoParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieved welcome info."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_CLIENT_KEY_PACKAGE}": {
      "get": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to get a client's KeyPackage",
        "description": "QS endpoint to get a client's KeyPackage\n",
        "operationId": "qs_client_key_package",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientKeyPackageParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieved the client's KeyPackage from the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_CLIENT_RECORD}": {
      "get": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to get client records",
        "description": "QS endpoint to get client records\n",
        "operationId": "qs_client_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieved a client record from the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_CREATE_CLIENT_RECORD}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to create client records",
        "description": "QS endpoint to create client records\n",
        "operationId": "qs_create_client_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created a client record on the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_CREATE_USER_RECORD}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to create user records",
        "description": "QS endpoint to create user records\n",
        "operationId": "qs_create_user_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created a user record on the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_DELETE_CLIENT_RECORD}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to delete client records",
        "description": "QS endpoint to delete client records\n",
        "operationId": "qs_delete_client_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteClientRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deleted the client record from the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_DELETE_USER_RECORD}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to delete user records",
        "description": "QS endpoint to delete user records\n",
        "operationId": "qs_delete_user_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deleted a user record on the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_DEQUEUE_MESSAGES}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to dequeue messages",
        "description": "QS endpoint to dequeue messages\n",
        "operationId": "qs_dequeue_messages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DequeueMessagesParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dequeued messages from the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_KEY_PACKAGE_BATCH}": {
      "get": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to get a KeyPackageBatch",
        "description": "QS endpoint to get a KeyPackageBatch\n",
        "operationId": "qs_key_package_batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyPackageBatchParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieved a KeyPackageBatch from the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_PUBLISH_KEY_PACKAGES}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to publish KeyPackages",
        "description": "QS endpoint to publish KeyPackages\n",
        "operationId": "qs_publish_key_packages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishKeyPackagesParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Published KeyPackages on the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_QC_ENCRYPTION_KEY}": {
      "get": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to fetch queue config encryption key",
        "description": "QS endpoint to fetch queue config encryption key\n",
        "operationId": "qs_qc_encryption_key",
        "responses": {
          "200": {
            "description": "Retrieved QueueConfig encryption key."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_UPDATE_CLIENT_RECORD}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to update client records",
        "description": "QS endpoint to update client records\n",
        "operationId": "qs_update_client_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated the client record on the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_UPDATE_USER_RECORD}": {
      "post": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to update user records",
        "description": "QS endpoint to update user records\n",
        "operationId": "qs_update_user_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated the user record on the QS."
          }
        },
        "deprecated": false
      }
    },
    "{ENDPOINT_QS_USER_RECORD}": {
      "get": {
        "tags": [
          "QS"
        ],
        "summary": "QS endpoint to get user records",
        "description": "QS endpoint to get user records\n",
        "operationId": "qs_user_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRecordParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieved a user record from the QS."
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "AddClientsParams": {
        "type": "object",
        "required": [
          "commit",
          "ear_key",
          "group_info_update",
          "welcome",
          "welcome_attribution_info"
        ],
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "group_info_update": {
            "$ref": "#/components/schemas/GroupInfoUpdate"
          },
          "welcome": {
            "$ref": "#/components/schemas/Welcome"
          },
          "welcome_attribution_info": {
            "$ref": "#/components/schemas/WelcomeAttributionInfo"
          }
        }
      },
      "AddPackage": {
        "type": "object",
        "required": [
          "key_package",
          "icc_ciphertext"
        ],
        "properties": {
          "icc_ciphertext": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "key_package": {
            "$ref": "#/components/schemas/KeyPackage"
          }
        }
      },
      "AddUsersParams": {
        "type": "object",
        "required": [
          "commit",
          "ear_key",
          "group_info_update",
          "welcome",
          "welcome_attribution_info",
          "key_package_batches"
        ],
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "group_info_update": {
            "$ref": "#/components/schemas/GroupInfoUpdate"
          },
          "key_package_batches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyPackageBatch"
            }
          },
          "welcome": {
            "$ref": "#/components/schemas/Welcome"
          },
          "welcome_attribution_info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WelcomeAttributionInfo"
            }
          }
        }
      },
      "Ciphertext": {
        "type": "object",
        "required": [
          "ciphertext",
          "nonce"
        ],
        "properties": {
          "ciphertext": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "nonce": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClientId": {
        "type": "object"
      },
      "ClientKeyPackageParams": {
        "type": "object",
        "required": [
          "qs_cid"
        ],
        "properties": {
          "qs_cid": {
            "$ref": "#/components/schemas/QsCid"
          }
        }
      },
      "ClientQueueConfig": {
        "type": "object",
        "required": [
          "client_homeserver_domain",
          "sealed_config"
        ],
        "properties": {
          "client_homeserver_domain": {
            "$ref": "#/components/schemas/Fqdn"
          },
          "sealed_config": {
            "$ref": "#/components/schemas/SealedQueueConfig"
          }
        }
      },
      "ClientRecordParams": {
        "type": "object",
        "required": [
          "qs_cid"
        ],
        "properties": {
          "qs_cid": {
            "$ref": "#/components/schemas/QsCid"
          }
        }
      },
      "CreateClientRecordParams": {
        "type": "object",
        "required": [
          "client_record_auth_key",
          "queue_encryption_key"
        ],
        "properties": {
          "client_record_auth_key": {
            "$ref": "#/components/schemas/SignaturePublicKey"
          },
          "queue_encryption_key": {
            "$ref": "#/components/schemas/HpkePublicKey"
          }
        }
      },
      "CreateGroupParams": {
        "type": "object",
        "required": [
          "key_package",
          "encrypted_credential_chain",
          "creator_queue_config",
          "creator_user_auth_key",
          "initial_ear_key"
        ],
        "properties": {
          "creator_queue_config": {
            "$ref": "#/components/schemas/ClientQueueConfig"
          },
          "creator_user_auth_key": {
            "$ref": "#/components/schemas/UserAuthKey"
          },
          "encrypted_credential_chain": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "initial_ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "key_package": {
            "$ref": "#/components/schemas/KeyPackage"
          }
        }
      },
      "CreateUserRecordParams": {
        "type": "object",
        "required": [
          "user_record_auth_key",
          "friendship_token",
          "client_record_auth_key",
          "queue_encryption_key"
        ],
        "properties": {
          "client_record_auth_key": {
            "$ref": "#/components/schemas/SignaturePublicKey"
          },
          "friendship_token": {
            "$ref": "#/components/schemas/FriendshipToken"
          },
          "queue_encryption_key": {
            "$ref": "#/components/schemas/HpkePublicKey"
          },
          "user_record_auth_key": {
            "$ref": "#/components/schemas/SignaturePublicKey"
          }
        }
      },
      "DeleteAuthKeyEarKey": {
        "type": "object",
        "description": "EAR key for the [`QueueDeletionAuthKey`].",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/DeleteAuthKeyEarKeySecret"
          }
        }
      },
      "DeleteAuthKeyEarKeySecret": {
        "type": "array",
        "items": {
          "type": "object"
        },
        "maxItems": 32,
        "minItems": 32
      },
      "DeleteClientRecordParams": {
        "type": "object",
        "required": [
          "qs_cid"
        ],
        "properties": {
          "qs_cid": {
            "$ref": "#/components/schemas/QsCid"
          }
        }
      },
      "DeleteGroupParams": {
        "type": "object",
        "required": [
          "commit",
          "ear_key"
        ],
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          }
        }
      },
      "DeleteUserRecordParams": {
        "type": "object",
        "required": [
          "qs_uid"
        ],
        "properties": {
          "qs_uid": {
            "$ref": "#/components/schemas/QsUid"
          }
        }
      },
      "DequeueMessagesParams": {
        "type": "object",
        "required": [
          "qs_cid",
          "sequence_number_start",
          "max_message_number"
        ],
        "properties": {
          "max_message_number": {
            "type": "integer",
            "format": "int64"
          },
          "qs_cid": {
            "$ref": "#/components/schemas/QsCid"
          },
          "sequence_number_start": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EncryptedPushToken": {
        "type": "object",
        "required": [
          "ctxt"
        ],
        "properties": {
          "ctxt": {
            "$ref": "#/components/schemas/Ciphertext"
          }
        }
      },
      "EnqueueAuthKeyCtxt": {
        "type": "object",
        "description": "A ciphertext holding an encrypted [`EnqueueAuthenticationKey`].",
        "required": [
          "ctxt"
        ],
        "properties": {
          "ctxt": {
            "$ref": "#/components/schemas/Ciphertext"
          }
        }
      },
      "EnqueueAuthKeyEarKey": {
        "type": "object",
        "description": "EAR key for [`EnqueueAuthenticationKey`]s.",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/EnqueueAuthKeyEarKeySecret"
          }
        }
      },
      "EnqueueAuthKeyEarKeySecret": {
        "type": "array",
        "items": {
          "type": "object"
        },
        "maxItems": 32,
        "minItems": 32
      },
      "EnqueueAuthenticationKey": {
        "type": "object",
        "description": "A secret that is used to authenticate enqueue requests.",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/EnqueueAuthenticationKeySecret"
          }
        }
      },
      "EnqueueAuthenticationKeySecret": {
        "type": "array",
        "items": {
          "type": "object"
        },
        "maxItems": 32,
        "minItems": 32
      },
      "ExternalCommitInfoParams": {
        "type": "object",
        "required": [
          "group_id",
          "ear_key"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "group_id": {
            "$ref": "#/components/schemas/GroupId"
          }
        }
      },
      "Fqdn": {
        "type": "object"
      },
      "FriendshipToken": {
        "type": "object"
      },
      "GroupId": {
        "type": "object",
        "required": [
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string"
          }
        }
      },
      "GroupInfoUpdate": {
        "type": "object",
        "required": [
          "signature"
        ],
        "properties": {
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "GroupStateEarKey": {
        "type": "object",
        "description": "Key to encrypt/decrypt the roster of the DS group state. Roster keys can be",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/GroupStateEarKeySecret"
          }
        }
      },
      "GroupStateEarKeySecret": {
        "type": "array",
        "items": {
          "type": "object"
        },
        "maxItems": 32,
        "minItems": 32
      },
      "HpkePublicKey": {
        "type": "object",
        "required": [
          "public_key"
        ],
        "properties": {
          "public_key": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "InitialClientKdfKey": {
        "type": "object",
        "description": "A key used to derive further key material for use by the IDS when a client",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/InitialClientKdfKeySecret"
          }
        }
      },
      "InitialClientKdfKeySecret": {
        "type": "array",
        "items": {
          "type": "object"
        },
        "maxItems": 32,
        "minItems": 32
      },
      "JoinConnectionGroupParams": {
        "type": "object",
        "required": [
          "external_commit",
          "ear_key",
          "group_info_update"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "external_commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "group_info_update": {
            "$ref": "#/components/schemas/GroupInfoUpdate"
          }
        }
      },
      "JoinGroupParams": {
        "type": "object",
        "required": [
          "external_commit",
          "ear_key",
          "group_info_update"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "external_commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "group_info_update": {
            "$ref": "#/components/schemas/GroupInfoUpdate"
          }
        }
      },
      "KeyPackage": {
        "type": "object"
      },
      "KeyPackageBatch": {
        "type": "object"
      },
      "KeyPackageBatchParams": {
        "type": "object",
        "required": [
          "qs_cid"
        ],
        "properties": {
          "qs_cid": {
            "$ref": "#/components/schemas/QsCid"
          }
        }
      },
      "LeafIndex": {
        "type": "object"
      },
      "MacTag": {
        "type": "object",
        "required": [
          "tag"
        ],
        "properties": {
          "tag": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "MlsMessage": {
        "type": "object"
      },
      "MlsRatchetTree": {
        "type": "object"
      },
      "OdsDeleteQueueParams": {
        "type": "object",
        "required": [
          "queue_id",
          "auth_token_key"
        ],
        "properties": {
          "auth_token_key": {
            "$ref": "#/components/schemas/DeleteAuthKeyEarKey"
          },
          "queue_id": {
            "$ref": "#/components/schemas/QueueId"
          }
        }
      },
      "OdsDeleteQueueRequest": {
        "type": "object",
        "required": [
          "payload",
          "request_hash",
          "mac"
        ],
        "properties": {
          "mac": {
            "$ref": "#/components/schemas/MacTag"
          },
          "payload": {
            "$ref": "#/components/schemas/OdsDeleteQueueParams"
          },
          "request_hash": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "OdsFanOutQueueUpdate": {
        "type": "object",
        "required": [
          "ods_basic_queue_update"
        ],
        "properties": {
          "encrypted_auth_key_option": {
            "$ref": "#/components/schemas/EnqueueAuthKeyCtxt"
          },
          "encrypted_push_token_option": {
            "$ref": "#/components/schemas/EncryptedPushToken"
          },
          "ods_basic_queue_update": {
            "$ref": "#/components/schemas/OdsQueueUpdate"
          }
        }
      },
      "OdsFetchMessageParamsTBS": {
        "type": "object",
        "required": [
          "queue_id",
          "sequence_number_start",
          "max_messages"
        ],
        "properties": {
          "max_messages": {
            "type": "integer",
            "format": "int64"
          },
          "queue_id": {
            "$ref": "#/components/schemas/QueueId"
          },
          "sequence_number_start": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OdsFetchMessagesParams": {
        "type": "object",
        "required": [
          "payload",
          "signature"
        ],
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/OdsFetchMessageParamsTBS"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "OdsQueueInfoUpdate": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "FanOutQueueUpdate": {
                "$ref": "#/components/schemas/OdsFanOutQueueUpdate"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "DirectQueueUpdate": {
                "$ref": "#/components/schemas/OdsQueueUpdate"
              }
            }
          }
        ]
      },
      "OdsQueueUpdate": {
        "type": "object",
        "properties": {
          "owner_public_key_option": {
            "$ref": "#/components/schemas/HpkePublicKey"
          },
          "owner_signature_key_option": {
            "$ref": "#/components/schemas/SignaturePublicKey"
          }
        }
      },
      "OdsUpdateQueueInfoParams": {
        "type": "object",
        "required": [
          "payload",
          "signature"
        ],
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/OdsUpdateQueueInfoParamsTBS"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "OdsUpdateQueueInfoParamsTBS": {
        "type": "object",
        "required": [
          "queue_id",
          "info_update"
        ],
        "properties": {
          "info_update": {
            "$ref": "#/components/schemas/OdsQueueInfoUpdate"
          },
          "queue_id": {
            "$ref": "#/components/schemas/QueueId"
          }
        }
      },
      "PublishKeyPackagesParams": {
        "type": "object",
        "required": [
          "qs_cid",
          "add_packages"
        ],
        "properties": {
          "add_packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddPackage"
            }
          },
          "qs_cid": {
            "$ref": "#/components/schemas/QsCid"
          }
        }
      },
      "PushTokenEarKey": {
        "type": "object",
        "description": "EAR key for the [`PushToken`] structs.",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/PushTokenEarKeySecret"
          }
        }
      },
      "PushTokenEarKeySecret": {
        "type": "array",
        "items": {
          "type": "object"
        },
        "maxItems": 32,
        "minItems": 32
      },
      "QsCid": {
        "type": "object"
      },
      "QsUid": {
        "type": "object"
      },
      "RemoveClientsParams": {
        "type": "object",
        "required": [
          "commit",
          "ear_key",
          "group_info_update",
          "user_auth_key"
        ],
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "group_info_update": {
            "$ref": "#/components/schemas/GroupInfoUpdate"
          },
          "user_auth_key": {
            "$ref": "#/components/schemas/UserAuthKey"
          }
        }
      },
      "RemoveUsersParams": {
        "type": "object",
        "required": [
          "commit",
          "ear_key",
          "group_info_update"
        ],
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "group_info_update": {
            "$ref": "#/components/schemas/GroupInfoUpdate"
          }
        }
      },
      "ResyncClientParams": {
        "type": "object",
        "required": [
          "external_commit",
          "ear_key",
          "group_info_update"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "external_commit": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "group_info_update": {
            "$ref": "#/components/schemas/GroupInfoUpdate"
          }
        }
      },
      "SealedQueueConfig": {
        "type": "object"
      },
      "SelfRemoveClientParams": {
        "type": "object",
        "required": [
          "remove_proposals",
          "ear_key"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "remove_proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MlsMessage"
            }
          }
        }
      },
      "SelfRemoveUserParams": {
        "type": "object",
        "required": [
          "remove_proposals",
          "ear_key"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "remove_proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MlsMessage"
            }
          }
        }
      },
      "SendMessageParams": {
        "type": "object",
        "required": [
          "application_message",
          "ear_key"
        ],
        "properties": {
          "application_message": {
            "$ref": "#/components/schemas/MlsMessage"
          },
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          }
        }
      },
      "Signature": {
        "type": "object"
      },
      "SignaturePublicKey": {
        "type": "object",
        "required": [
          "public_key"
        ],
        "properties": {
          "public_key": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "UpdateClientRecordParams": {
        "type": "object",
        "required": [
          "qs_cid",
          "client_record_auth_key",
          "queue_encryption_key",
          "blocklist_entries"
        ],
        "properties": {
          "blocklist_entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupId"
            }
          },
          "client_record_auth_key": {
            "$ref": "#/components/schemas/SignaturePublicKey"
          },
          "qs_cid": {
            "$ref": "#/components/schemas/QsCid"
          },
          "queue_encryption_key": {
            "$ref": "#/components/schemas/HpkePublicKey"
          }
        }
      },
      "UpdateQueueInfoParams": {
        "type": "object",
        "required": [
          "group_id",
          "ear_key",
          "new_queue_config"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "group_id": {
            "$ref": "#/components/schemas/GroupId"
          },
          "new_queue_config": {
            "$ref": "#/components/schemas/ClientQueueConfig"
          }
        }
      },
      "UpdateUserRecordParams": {
        "type": "object",
        "required": [
          "qs_uid",
          "user_record_auth_key",
          "friendship_token"
        ],
        "properties": {
          "friendship_token": {
            "$ref": "#/components/schemas/FriendshipToken"
          },
          "qs_uid": {
            "$ref": "#/components/schemas/QsUid"
          },
          "user_record_auth_key": {
            "$ref": "#/components/schemas/SignaturePublicKey"
          }
        }
      },
      "UserAuthKey": {
        "type": "object",
        "description": "Public signature key known to all clients of a given user. This signature"
      },
      "UserRecordParams": {
        "type": "object",
        "required": [
          "qs_uid"
        ],
        "properties": {
          "qs_uid": {
            "$ref": "#/components/schemas/QsUid"
          }
        }
      },
      "Welcome": {
        "type": "object"
      },
      "WelcomeAttributionInfo": {
        "type": "object",
        "required": [
          "payload",
          "signature"
        ],
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/WelcomeAttributionInfoPayload"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "WelcomeAttributionInfoPayload": {
        "type": "object",
        "required": [
          "sender_client_id",
          "group_credential_encryption_key"
        ],
        "properties": {
          "group_credential_encryption_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "sender_client_id": {
            "$ref": "#/components/schemas/ClientId"
          }
        }
      },
      "WelcomeInfoParams": {
        "type": "object",
        "required": [
          "group_id",
          "ear_key",
          "epoch"
        ],
        "properties": {
          "ear_key": {
            "$ref": "#/components/schemas/GroupStateEarKey"
          },
          "epoch": {
            "type": "integer",
            "format": "int64"
          },
          "group_id": {
            "$ref": "#/components/schemas/GroupId"
          }
        }
      }
    }
  }
}